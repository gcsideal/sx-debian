#!/bin/sh
### BEGIN INIT INFO
# Provides:          sxserver
# Required-Start:    $local_fs $network $remote_fs $syslog $time
# Required-Stop:     $local_fs $network $remote_fs $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop nginx/sx.fcgi
# Description:       Scalable public and private cloud storage
### END INIT INFO

# Do NOT "set -e"
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="sxserver"
NAME=sxserver
DAEMON=/usr/sbin/sx.fcgi
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME/sxfcgi.pid
PROCESSNAME=sx.fcgi
DAEMON_HTTPD=/usr/sbin/nginx
DAEMON_HTTPD_ARGS="-c /etc/sxserver/sxhttpd.conf"
PIDFILE_HTTPD=/var/run/$NAME/nginx.pid
PROCESSNAME_HTTPD=nginx
SCRIPTNAME=/etc/init.d/sx
CONFIG_FILE=/etc/$NAME/sxfcgi.conf
SETUP=sxsetup

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        mkdir -p /var/run/sxserver
        OWNER=`grep run-as $CONFIG_FILE |cut -f2 -d\"`
        chown "$OWNER" /var/run/sxserver
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	start-stop-daemon --start --quiet --pidfile $PIDFILE_HTTPD --exec $DAEMON_HTTPD --test -- $DAEMON_HTTPD_ARGS > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE_HTTPD --exec $DAEMON_HTTPD -- \
		$DAEMON_HTTPD_ARGS \
		|| return 2
	# The above code will not work for interpreted scripts, use the next
	# six lines below instead (Ref: #643337, start-stop-daemon(8) )
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
	#	--name $NAME --test > /dev/null \
	#	|| return 1
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
	#	--name $NAME -- $DAEMON_ARGS \
	#	|| return 2

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	return 0
}

#
# Function that stops the daemon/service
#
do_stop_httpd()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE_HTTPD --name $PROCESSNAME_HTTPD
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE_HTTPD
        return 0
}

do_stop_fcgi() {
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $PROCESSNAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    rm -f $PIDFILE
    return 0
}

do_stop() {
    do_stop_httpd
    retval_httpd=$?
    do_stop_fcgi
    retval=$?

    [ $retval -eq 0 ] && retval=$retval_httpd
    return $retval
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --pidfile $PIDFILE_HTTPD --name $PROCESSNAME_HTTPD
	return 0
}

case "$1" in
  start)
        if [ -s "$CONFIG_FILE" ]; then
            [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
            do_start
            case "$?" in
                    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
            esac
        else
            [ "$VERBOSE" != no ] && log_warning_msg "$NAME daemon not configured, not starting... (run $SETUP)"
        fi
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON_HTTPD" "$PROCESSNAME_HTTPD" || exit $?
	status_of_proc "$DAEMON" "$PROCESSNAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
            if [ -s "$CONFIG_FILE" ]; then
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
            else
                [ "$VERBOSE" != no ] && log_warning_msg "$NAME daemon not configured, not starting... (run $SETUP)"
            fi
	    ;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
